#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–≤—å—é –Ω–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import dill
from extract import Extractor
import pandas as pd

def test_review_extraction():
    print("=== –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –†–ï–í–¨–Æ ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open('papers_with_reviews.pkl', 'rb') as f:
            papers_data = dill.load(f)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª papers_with_reviews.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ä–µ–≤—å—é (—É–±–∏—Ä–∞–µ–º 'match' –ø–æ–ª–µ)
    extractor = Extractor(
        fields=['forum'], 
        subfields={'content':['title', 'keywords', 'abstract']}, 
        extract_reviews=True
    )
    
    # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é —Å —Ä–µ–≤—å—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_paper = None
    test_venue = None
    
    print("\nüîç –ò—â–µ–º —Å—Ç–∞—Ç—å—é —Å —Ä–µ–≤—å—é...")
    for group_name, group_data in papers_data.items():
        for venue_name, venue_papers in group_data.items():
            for i, paper in enumerate(venue_papers):
                if (hasattr(paper, 'details') and 
                    paper.details and 
                    paper.details.get('directReplies')):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–≤—å—é (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                    direct_replies = paper.details['directReplies']
                    official_reviews = [
                        reply for reply in direct_replies 
                        if (isinstance(reply, dict) and 
                            'invitations' in reply and 
                            any('Official_Review' in inv for inv in reply['invitations']))
                    ]
                    if official_reviews:
                        test_paper = paper
                        test_venue = venue_name
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è —Å {len(official_reviews)} —Ä–µ–≤—å—é")
                        print(f"   Venue: {venue_name}")
                        title_content = paper.content.get('title', {})
                        title = title_content.get('value', 'No title') if isinstance(title_content, dict) else str(title_content)
                        print(f"   Title: {title[:100]}...")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ–≤—å—é
                        first_review = official_reviews[0]
                        review_content = first_review.get('content', {})
                        summary_content = review_content.get('summary', {})
                        summary = summary_content.get('value', 'No summary') if isinstance(summary_content, dict) else str(summary_content)
                        print(f"   First review summary: {summary[:100]}...")
                        break
            if test_paper:
                break
        if test_paper:
            break
    
    if not test_paper:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ä–µ–≤—å—é")
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ
    print("\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä...")
    try:
        extracted_data = extractor.extract(test_paper)
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Ä–µ–≤—å—é
        review_fields = [key for key in extracted_data.keys() if 'review' in key.lower()]
        print(f"\nüìã –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Ä–µ–≤—å—é: {review_fields}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è —Ä–µ–≤—å—é
        for field in review_fields:
            value = extracted_data[field]
            print(f"\nüîπ {field}:")
            if isinstance(value, str):
                if len(value) > 200:
                    print(f"   {value[:200]}...")
                    print(f"   [–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(value)}]")
                else:
                    print(f"   {value}")
            else:
                print(f"   {value}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏ CSV –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print(f"\nüíæ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π CSV...")
        df_data = [extracted_data]
        df = pd.DataFrame(df_data)
        df.to_csv('review_extraction_demo.csv', index=False)
        print(f"‚úÖ –§–∞–π–ª review_extraction_demo.csv —Å–æ–∑–¥–∞–Ω")
        print(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        print(f"   –†–∞–∑–º–µ—Ä: {df.shape}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
        print(f"\nüìä –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for i, col in enumerate(df.columns, 1):
            print(f"   {i:2d}. {col}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_review_extraction() 